\relax 
\@writefile{toc}{\contentsline {chapter}{\numberline {B}Server Side Code Appendix}{65}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {paragraph}{}{65}}
\@writefile{toc}{\contentsline {section}{\numberline {B.1}config/ApplicationConfig.java}{65}}
\newlabel{lst:ApplicationConfig}{{B.1}{65}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {B.1}A required file in JavaEE for declaring the default application path when deployed.}{65}}
\@writefile{toc}{\contentsline {section}{\numberline {B.2}config/CORSFilter}{65}}
\newlabel{lst:CORSFilter}{{B.2}{65}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {B.2}As CuraEngine allows cross origin responses a filter is requred to allow access by default in WildFly.}{65}}
\@writefile{toc}{\contentsline {section}{\numberline {B.3}cura/CuraEngine.java}{66}}
\newlabel{lst:CuraEngine}{{B.3}{66}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {B.3}CuraEngine.java is the main code that preforms slicing throgh the CuraEngine C++ executable.}{66}}
\@writefile{toc}{\contentsline {section}{\numberline {B.4}cura/CuraEngineOptions.java}{69}}
\newlabel{lst:CuraEngineOptions}{{B.4}{69}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {B.4}All arguments to the CuraEngine C++ executeable must be compiled before it can be executed. This code is the compiler for that argument list.}{69}}
\@writefile{toc}{\contentsline {section}{\numberline {B.5}cura/StreamDrainer.java}{72}}
\newlabel{lst:StreamDrainer}{{B.5}{72}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {B.5}For ProcessBuilder to run correctly its output stream must be read from. This code spawns a separate thread to read and log this output stream.}{72}}
\@writefile{toc}{\contentsline {section}{\numberline {B.6}rest/SlicerAPI.java}{73}}
\newlabel{lst:SlicerAPI}{{B.6}{73}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {B.6}The Wildfly application server hosts a public RESTful API which is where requests for slicing and data processing get sent to their corresponding methods.}{73}}
\@writefile{toc}{\contentsline {section}{\numberline {B.7}util/CuraEngineException.java}{79}}
\newlabel{lst:CuraEngineException}{{B.7}{79}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {B.7}This exception class gets thrown when any issue arises while CuraEngine is preforming a slice.}{79}}
\@writefile{toc}{\contentsline {section}{\numberline {B.8}util/FileTracker.java}{79}}
\newlabel{lst:FileTracker}{{B.8}{79}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {B.8}FileTracker tracks all of the files uploaded to the server to a series of hash maps. It also issues unique identifiers for each file that gets uploaded so that they may be tracked and accessed simply.}{79}}
\@writefile{toc}{\contentsline {section}{\numberline {B.9}util/PlatformExecutable.java}{83}}
\newlabel{lst:PlatformExecutable}{{B.9}{83}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {B.9}The PlatformExecutable class verifies if the local C++ executable is available and sets up the input and output pipes for CuraEngine if it is.}{83}}
\@setckpt{appendix2}{
\setcounter{page}{85}
\setcounter{equation}{0}
\setcounter{enumi}{0}
\setcounter{enumii}{0}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{0}
\setcounter{mpfootnote}{0}
\setcounter{part}{0}
\setcounter{chapter}{2}
\setcounter{section}{9}
\setcounter{subsection}{0}
\setcounter{subsubsection}{0}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{0}
\setcounter{table}{0}
\setcounter{savepage}{0}
\setcounter{parentequation}{0}
\setcounter{r@tfl@t}{0}
\setcounter{NAT@ctr}{16}
\setcounter{lstnumber}{86}
\setcounter{AM@survey}{0}
\setcounter{lstlisting}{9}
}
